/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {      
        behaviors {
                ht: hold_tap {
                        compatible = "zmk,behavior-hold-tap";
                        #binding-cells = <2>;
                        flavor = "tap-preferred";
                        tapping-term-ms = <250>;
                        quick-tap-ms = <150>;
                        require-prior-idle-ms = <125>;
                        bindings = <&kp>, <&kp>; 
                };
        };
        
        combos {
                compatible = "zmk,combos";
               
                l_parenthesis {
                bindings = <&kp LEFT_PARENTHESIS>;
                key-positions = <15 20>;
                require-prior-idle-ms = <150>;
                };

                r_parenthesis {
                bindings = <&kp RIGHT_PARENTHESIS>;
                key-positions = <14 21>;
                require-prior-idle-ms = <150>;
                };

                l_bracket {
                bindings = <&kp LEFT_BRACKET>;
                key-positions = <16 19>;
                require-prior-idle-ms = <150>;
                };

                r_bracket {
                bindings = <&kp RIGHT_BRACKET>;
                key-positions = <13 22>;
                require-prior-idle-ms = <150>;
                };

                l_brace {
                bindings = <&kp LEFT_BRACE>;
                key-positions = <17 18>;
                require-prior-idle-ms = <150>;
                };

                r_brace {
                bindings = <&kp RIGHT_BRACE>;
                key-positions = <12 23>;
                require-prior-idle-ms = <150>;
                };

                colon {
                bindings = <&kp COLON>;
                key-positions = <28 31>;
                require-prior-idle-ms = <150>;
                };

                equals {
                bindings = <&kp EQUAL>;
                key-positions = <27 32>;
                require-prior-idle-ms = <150>;
                };

                hash { 
                bindings = <&kp HASH>;
                key-positions = <26 33>;
                require-prior-idle-ms = <150>;
                };
        };

};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RSHIFT ESC |
//                    | GUI | LWR | SPC |   | CTRL | RSE  | ALT |
                        display-name = "Base";
                        bindings = <
   &ht CAPS TAB        &kp Q           &ht LG(S) W   &ht LG(C) E        &ht LG(V) R      &kp T               &kp Y &ht N1 U  &ht N2 I     &ht N3 O   &kp P         &kp BSPC
   &ht LBRC LCTRL &ht LBKT A      &ht LPAR S    &ht RPAR D         &ht RBKT F       &ht RBRC G          &kp H &ht N4 J  &ht N5 K     &ht N6 L   &ht N0 SEMI   &ht RCTRL SQT
   &kp LSHFT      &ht  UNDER Z    &ht EQUAL X   &ht KP_MULTIPLY C  &ht MINUS V      &ht TILDE B         &kp N &ht N7 M  &ht N8 COMMA &ht N9 DOT &kp FSLH      &ht RSHIFT ESC
                  &kp LGUI &mo 1 &kp SPACE                                                              &kp RCTRL &mo 2 &kp RALT
                        >;
                };
                lower_layer {

                        display-name = "Lower";
                        bindings = <
   &kp TAB    &kp LG(LC(F)) &kp LG(LC(Z)) &kp LG(LC(A))   &kp LG(LC(G)) &kp LG(LC(W))             &trans   &kp N1   &kp N2   &kp N3       &trans   &kp BSPC
   &trans     &kp LEFT      &kp DOWN      &kp UP          &kp RIGHT    &kp C_MUTE                 &trans   &kp N4   &kp N5   &kp N6       &trans   &kp RCTRL
   &kp LSHFT  &kp C_PREV    &kp C_PP      &kp C_NEXT      &kp C_VOL_UP &kp C_VOL_DN               &trans   &kp N7   &kp N8   &kp N9       &kp N0   &ht RSHIFT ESC
                          	                &kp LGUI        &trans       &kp SPACE                &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {

                        display-name = "Raise";
                        bindings = <
   &kp  TAB        &kp EXCL        &kp AT          &kp HASH        &kp DLLR        &kp PRCNT               &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL       &trans          &trans          &trans          &kp LG(LS(N4))  &to 3                  &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &bt BT_CLR_ALL  &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4            &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

                game_layer {
// ------------------------------------------e-----------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RSHIFT ESC |
//                    | GUI | LWR | SPC |   | CTRL | RSE  | ALT |
                        display-name = "Base";
                        bindings = <
   &kp TAB        &kp Q      &kp W    &kp E        &kp  R       &kp T               &kp Y &ht N1 U  &ht N2 I     &ht N3 O   &kp P         &kp BSPC
   &kp LCTRL      &kp A      &kp S    &kp D        &kp  F       &kp G               &kp H &ht N4 J  &ht N5 K     &ht N6 L   &ht N0 SEMI   &kp SQT
   &kp LSHFT      &kp Z      &kp X    &kp  C       &kp  V       &kp  B              &kp N &ht N7 M  &ht N8 COMMA &ht N9 DOT &kp FSLH      &ht RSHIFT ESC
                  &kp LGUI &to 0 &kp SPACE                                                              &kp RET &kp RCTRL &kp RALT
                        >;
                };
        };
};
